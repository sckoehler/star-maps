#! /usr/bin/ruby

# genmap makes simple star maps in SVG format, suitable for embedding in
# a web page or converting to PDF or some graphics file format.  The original
# intent was to copy the Sky Atlas 2000 maps with custom content, such as
# displaying just the Herschel 400 objects.  However, it can also be used
# to generate completely custom maps.
#
# This software is free to use for any purpose.  See the LICENSE file on
# Github for details.

require 'optparse'
require "open-uri"
require "json"
require "zlib"

# URLs of data sources
$geo_base_url = "https://dieghernan.github.io/celestial_data/data/"
$cb_base_url = "https://cdsarc.u-strasbg.fr/ftp/VI/49/"

# Specification for Sky Atlas 2000 maps.  The parameters are:
#
#   Phi1 - northern standard parallel
#   Phi2 - southern standard parallel
#   Ra0  - map center right ascension
#   Dec0 - map center declination
#   Ra1  - map UL right ascension
#   Dec1 - map UL declination
#   Ra2  - map LR right ascension
#   Dec2 - map LR declination
map_specs = [
  [],
  [90, 55,  6, 70, 12.5, 72,  2.9, 35], #1 north polar maps
  [90, 55, 14, 70, 20.3, 72, 10.9, 35],
  [90, 55, 22, 70, 28.5, 72, 18.9, 35],

  [47, 25,  2, 38,  5.1, 50,  0.1, 13], #4 north mid-latitude maps
  [47, 25,  6, 38,  9.1, 50,  4.1, 13],
  [47, 25, 10, 38, 13.1, 50,  8.1, 13],
  [47, 25, 14, 38, 17.1, 50, 12.1, 13],
  [47, 25, 18, 38, 21.1, 50, 16.1, 13],
  [47, 25, 22, 38, 25.1, 50, 20.1, 13],

  [14, -14,  2, 0,  4, 20,  0, -20], #10 equatorial maps
  [14, -14,  5, 0,  7, 20,  3, -20],
  [14, -14,  8, 0, 10, 20,  6, -20],
  [14, -14, 11, 0, 13, 20,  9, -20],
  [14, -14, 14, 0, 16, 20, 12, -20],
  [14, -14, 17, 0, 19, 20, 15, -20],
  [14, -14, 20, 0, 22, 20, 18, -20],
  [14, -14, 23, 0, 25, 20, 21, -20],

  [-47, -25,  2, -38,  3.9, -13, -1.1, -50], #18 south mid-latitude maps
  [-47, -25,  6, -38,  7.9, -13,  2.9, -50],
  [-47, -25, 10, -38, 11.9, -13,  6.9, -50],
  [-47, -25, 14, -38, 15.9, -13, 10.9, -50],
  [-47, -25, 18, -38, 19.9, -13, 14.9, -50],
  [-47, -25, 22, -38, 23.9, -13, 18.9, -50],

  [-90, -55,  2, -70,  5.1, -35, -3.5, -72], #24 south polar maps
  [-90, -55, 10, -70, 13.1, -35,  4.5, -72],
  [-90, -55, 18, -70, 21.1, -35, 12.5, -72],
]

DSO_STROKE = 0.5

###########################################################################
# Utility functions
###########################################################################

def g(x)
  # Convert a floating point number to a string, limiting the digits.
  "%.2f" % x
end

def f(x)
  # Convert a floating point number to a quoted string.
  %Q["#{g(x)}"]
end

def ha_to_rad(ra)
  # Convert hour-angle to radians.
  ra * 2*Math::PI/24
end

def deg_to_rad(dec)
  # Convert degrees to radians.
  dec * Math::PI/180
end

def project(ra, dec, phi1, phi2, ra0, dec0)
  # Project ra, dec onto a flat map using standard parallels phi1 and phi2
  # and centered on ra0, dec0.  All parameters are in radians.

  # Normalize the cone/cylinder opposite ra0
  ra += 2*Math::PI if ra0-ra > Math::PI
  ra -= 2*Math::PI if ra-ra0 > Math::PI

  if phi1+phi2 == 0
    # Using a cylindrical projection
    x = ra0-ra
    y = Math.tan(dec)*Math.cos(phi1)
  else
    # Using a conic projection (Albers)
    n = (Math.sin(phi1)+Math.sin(phi2))/2
    theta = n*(ra0-ra)
    c = (Math.cos(phi1))**2 + 2*n*Math.sin(phi1)
    rho = Math.sqrt(c - 2*n*Math.sin(dec))/n
    rho0 = Math.sqrt(c - 2*n*Math.sin(dec0))/n
    x = rho*Math.sin(theta)
    y = rho0 - rho*Math.cos(theta)
  end
  return Scale*x, -Scale*y
end

def parse_coord(coord)
  # Parse a string in the format DDDD.D+DDDD into [ra, dec] in radians.
  ra = coord[0..1].to_i + coord[2..5].to_f/60
  dec = (coord[6] == "+" ? 1 : -1) * (coord[7..8].to_i + coord[9..10].to_i/60.0)
  [ha_to_rad(ra), deg_to_rad(dec)]
end

def read_json(file)
  # Download and cache a geojson data file from $geo_base_url and parse
  # into Ruby format.
  fn = "data/#{file}"
  if not File.exist?(fn)
    contents = URI.open($geo_base_url + file).read
    File.write(fn, contents)
  end
  contents = File.read(fn)
  JSON.parse(contents)
end

def read_const_boundaries(file)
  # Download and cache a constellation boundary file from $cb_base_url
  # and parse it into a hash of boundary segments by constellation.
  fn = "data/#{file}"
  if not File.exist?(fn)
    puts $cb_base_url + file
    compressed_contents = URI.open($cb_base_url + file).read
    File.write(fn, compressed_contents)
  end
  infile = open(fn)
  gz = Zlib::GzipReader.new(infile)
  data = {}
  data.default = []
  gz.each_line do |line|
    ra, dec, const = line.split(" ")
    data[const] += [[ra.to_f, dec.to_f]]
  end
  data
end

def in_bounds(x, y, bounds)
  # Return true if x, y is within the map boundary bounds.
  xmin, xmax, ymin, ymax = bounds
  x >= xmin and x <= xmax and y >= ymin and y <= ymax
end

def rotate_poly(a, ra0)
  # Any polygon that crosses hour-angle 0 is split there.  This function
  # changes the split to a different hour-angle (ra0). If this were not
  # done, Milky Way brighness contours would not display correctly.

  return a if ra0 == 0

  # Calculate the split location
  s = ra0+180
  s -= 360 if s > 180

  # Find the first reversal
  for i in 0.upto(a.length-2)
    break if (a[i+1][1] - a[i][1]).abs > 5
  end
  return a if i == a.length-2

  # Rearrange a to put the break at the start
  a = a[(i+1)..(a.length-2)] + a[0..i]

  # Find the second reversal
  for r in 0.upto(a.length-2)
    break if (a[r+1][1] - a[r][1]).abs > 5
  end

  # Locate the first split forwards and backwards as u and v
  for u in 0.upto(r-1)
    break if (a[u][0] < s and a[u+1][0] > s) or (a[u][0] > s and a[u+1][0] < s)
  end
  for v in (r-1).downto(0)
    break if (a[v][0] < s and a[v+1][0] > s) or (a[v][0] > s and a[v+1][0] < s)
  end

  # Locate the second split forwards and backwards as w and x
  for w in r.upto(a.length-2)
    break if (a[w][0] < s and a[w+1][0] > s) or (a[w][0] > s and a[w+1][0] < s)
  end
  for x in (a.length-2).downto(r)
    break if (a[x][0] < s and a[x+1][0] > s) or (a[x][0] > s and a[x+1][0] < s)
  end

  a[(v+1)..r] + a[0..u] + a[(x+1)..(a.length-1)] + a[(r+1)..w] + a[(v+1)..(v+1)]
end

###########################################################################
# Draw individual map elements
###########################################################################

def draw_star(x, y, mag)
  # Draw a star with size related to magnitude.
  size = 0.upto(10).map{|x| 10*0.70**x}
  puts %Q[<circle cx=#{f(x)} cy=#{f(y)} r=#{f(size[(mag-0.5).floor+2])}/>]
end

def draw_dso(x, y, type, name, plus)
  # Draw DSOs using symbols similar to that used in Sky Atlas 2000.

  if not plus.nil?
    # Draw DSOs as red plus signs.
    puts %Q[<line x1=#{f(x)} y1=#{f(y-4)} x2=#{f(x)} y2=#{f(y+4)} stroke="red" stroke-width="2"/>]
    puts %Q[<line x1=#{f(x-4)} y1=#{f(y)} x2=#{f(x+4)} y2=#{f(y)} stroke="red" stroke-width="2"/>]
  else
    case type
    when "G", "gg", "g", "s", "s0", "sd", "i", "e"
      puts %Q[<ellipse cx=#{f(x)} cy=#{f(y)} rx="5" ry="2.5" fill="red" stroke="black" stroke-width="#{DSO_STROKE}"/>]
    when "GC", "gc"
      puts %Q[<circle cx=#{f(x)} cy=#{f(y)} r="4" fill="yellow" stroke="black" stroke-width="#{DSO_STROKE}"/>]
      puts %Q[<line x1=#{f(x)} y1=#{f(y-4)} x2=#{f(x)} y2=#{f(y+4)} stroke="black" stroke-width="#{DSO_STROKE}"/>]
      puts %Q[<line x1=#{f(x-4)} y1=#{f(y)} x2=#{f(x+4)} y2=#{f(y)} stroke="black" stroke-width="#{DSO_STROKE}"/>]
    when "PN", "pn"
      puts %Q[<line x1=#{f(x)} y1=#{f(y-6)} x2=#{f(x)} y2=#{f(y+6)} stroke="black" stroke-width="#{DSO_STROKE}"/>]
      puts %Q[<line x1=#{f(x-6)} y1=#{f(y)} x2=#{f(x+6)} y2=#{f(y)} stroke="black" stroke-width="#{DSO_STROKE}"/>]
      puts %Q[<circle cx=#{f(x)} cy=#{f(y)} r="4" fill="lightgreen" stroke="black" stroke-width="#{DSO_STROKE}"/>]
    when "OC", "oc", "pos"
      puts %Q[<circle cx=#{f(x)} cy=#{f(y)} r="4" fill="yellow" stroke="black" stroke-width="#{DSO_STROKE}" stroke-dasharray="1.5"/>]
    when "DN", "sfr", "rn", "snr", "bn", "en", "dn"
      puts %Q[<rect x=#{f(x-4)} y=#{f(y-4)} width="8" height="8" fill="lightgreen" stroke="black" stroke-width="#{DSO_STROKE}"/>]
    else
      puts %Q[<rect x=#{f(x-4)} y=#{f(y-4)} width="8" height="8" fill="red" stroke-width="#{DSO_STROKE}"/>]
    end
  end
end

def draw_const_path(pts)
  # Draw a constellation line path.
  puts %Q[<polyline points="#{pts.map{|x| x.map{|y| g(y)}.join(",")}.join(" ")}"
          style="fill:none;stroke:black;stroke-width:0.5"/>]
end

def draw_border_path(pts)
  # Draw a constellation border path.
  puts %Q[<polyline points="#{pts.map{|x| x.map{|y| g(y)}.join(",")}.join(" ")}"
          style="fill:none;stroke:grey;stroke-width:0.5;stroke-dasharray:3"/>]
end

def draw_grid_path(pts)
  # Draw a coordinate grid path.
  puts %Q[<polyline points="#{pts.map{|x| x.map{|y| g(y)}.join(",")}.join(" ")}"
          style="fill:none;stroke:grey;stroke-width:0.5"/>]
end

def draw_mw_contour(pts, level)
  # Draw a filled Milky Way brighess polygon.
  puts %Q[<polyline points="#{pts.map{|x| x.map{|y| g(y)}.join(",")}.join(" ")}"
          style="fill:hsl(186,100%,#{100-5*level}%)"/>]
end

###########################################################################
# Draw a complete map layer
###########################################################################

def plot_grid(bounds)
  # Plot coordinate grid lines
  for dec in (-80).step(80, 10)
    line = (Ra0_ha.floor-12).step(Ra0_ha+12, 0.2).map{|ra| [ra, dec]}
    xyline = line.map{|x| project(ha_to_rad(x[0]), deg_to_rad(x[1]), Phi1, Phi2, Ra0, Dec0)}
    # Draw any line that has a point in bounds.
    draw_grid_path(xyline) if xyline.map{|x| in_bounds(x[0], x[1], bounds)}
  end

  for ra in (Ra0_ha.floor-12).upto(Ra0_ha+12)
    bound = ra.even? ? 85 : 80
    line = (-bound).step(bound, 2).map{|dec| [ra, dec]}
    xyline = line.map{|x| project(ha_to_rad(x[0]), deg_to_rad(x[1]), Phi1, Phi2, Ra0, Dec0)}
    # Draw any line that has a point in bounds.
    draw_grid_path(xyline) if xyline.map{|x| in_bounds(x[0], x[1], bounds)}
  end
end

def plot_dsos(bounds, file, mag_limit=12)
  # Plot DSOs to the specified magnitude limit.
  data = read_json(file)
  for f in data["features"]
    name = f["properties"]["name"]
    type = f["properties"]["type"]
    mag = f["properties"]["mag"]
    coord = f["geometry"]["coordinates"]
    if mag <= mag_limit
      ra = deg_to_rad(coord[0])
      dec = deg_to_rad(coord[1])
      x, y = project(ra, dec, Phi1, Phi2, Ra0, Dec0)
      draw_dso(x, y, type, name, nil) if in_bounds(x, y, bounds)
    end
  end
end

def plot_stars(bounds, mag_limit=10)
  # Plot stars to the specified magnitude limit.
  if mag_limit <= 6.0
    data = read_json("stars.6.geojson")
  elsif mag_limit <= 8.0
    data = read_json("stars.8.geojson")
  else
    data = read_json("stars.14.geojson")
  end
  for f in data["features"]
    name = f["properties"]["name"]
    type = f["properties"]["type"]
    mag = f["properties"]["mag"]
    coord = f["geometry"]["coordinates"]
    if mag <= mag_limit
      ra = deg_to_rad(coord[0])
      dec = deg_to_rad(coord[1])
      x, y = project(ra, dec, Phi1, Phi2, Ra0, Dec0)
      draw_star(x, y, mag) if in_bounds(x, y, bounds)
    end
  end
end

def plot_const_lines(bounds)
  # Plot constellation lines.
  data = read_json("constellations.lines.geojson")
  for f in data["features"]
    name = f["properties"]["name"]
    lines = f["geometry"]["coordinates"]
    for line in lines
      xyline = line.map{|x| project(deg_to_rad(x[0]), deg_to_rad(x[1]), Phi1, Phi2, Ra0, Dec0)}
      # Draw any line that has a point in bounds.
      draw_const_path(xyline) if xyline.map{|x| in_bounds(x[0], x[1], bounds)}.any?
    end
  end
end

def plot_const_borders(bounds)
  # Plot constellation borders.
  data = read_const_boundaries("bound_20.dat.gz")
  for const, points in data
    points.append(points[0])
    xyline = points.map{|x| project(ha_to_rad(x[0]), deg_to_rad(x[1]), Phi1, Phi2, Ra0, Dec0)}
    # Draw any line that has a point in bounds.
    draw_border_path(xyline) if xyline.map{|x| in_bounds(x[0], x[1], bounds)}.any?
  end
end

def plot_mw(bounds, ra0)
  # Plot Milky Way brightness regions.
  data = read_json("mw.geojson")
  for f in data["features"]
    level = f["properties"]["id"][2].to_i
    group = f["geometry"]["coordinates"]
    for patch in group
      offset = 0
      rawline = []
      for line in patch
        rot_line = rotate_poly(line, ra0)
        xyline = rot_line.map{|x| project(deg_to_rad(x[0]), deg_to_rad(x[1]), Phi1, Phi2, Ra0, Dec0)}
        draw_mw_contour(xyline, level+offset) if  xyline.map{|x| in_bounds(x[0], x[1], bounds)}.any?
        offset = -1
      end
    end
  end
end

def plot_h400(bounds, plus)
  # Plot Herschel 400 objects. The H400 objects are generated from a special
  # list, rather than the dso list.
  File.open("data/h400.csv").each do |line|
    x, ngc, type, const, mag, size, coord, desc = line.split(",")
    ra, dec = parse_coord(coord)
    x, y = project(ra, dec, Phi1, Phi2, Ra0, Dec0)
    draw_dso(x, y, type, ngc, plus) if in_bounds(x, y, bounds)
  end
end

def plot_border(bounds)
  # Print the map border.
  xmin, xmax, ymin, ymax = bounds
  puts %Q[<rect x=#{f(xmin)} y=#{f(ymin)} width=#{f(xmax-xmin)} height=#{f(ymax-ymin)} stroke="black" stroke-width="1" fill="none"/>]
end

def plot_map_number(bounds, map_number)
  xmin, xmax, ymin, ymax = bounds
  puts %Q[<text x=#{f(xmin+20)} y=#{f(ymin+30)} font-size="20" fill="black">#{map_number}</text>]
end

###########################################################################
# Main program
###########################################################################

# Parse the command line.
options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: test.rb [options]"

  opts.on("-a", "--scale FACTOR", Integer, "Scale factor") do |v|
    options[:scale] = v
  end
  opts.on("-r", "--margin PIXELS", Integer, "Margin outside map") do |v|
    options[:margin] = v
  end
  opts.on("-m", "--map NUM", Integer, "Sky Atlas 2000 map number") do |v|
    options[:map] = v
  end
  opts.on("-u", "--ul DDDD.D+DDDD ", String, "Upper-left coordinate") do |v|
    options[:ul] = v
  end
  opts.on("-l", "--lr DDDD.D+DDDD", String, "Lower-right coordinate") do |v|
    options[:lr] = v
  end
  opts.on("-s", "--stars MAG", Float, "Plot stars") do |v|
    options[:stars] = v
  end
  opts.on("-g", "--grid", "Plot grid") do |v|
    options[:grid] = v
  end
  opts.on("-H", "--herschel", "Plot Herschel 400 objects") do |v|
    options[:h400] = v
  end
  opts.on("-p", "--plus", "Print dsos as plus signs") do |v|
    options[:plus] = v
  end
  opts.on("-M", "--messier", "Plot Messier objects") do |v|
    options[:messier] = v
  end
  opts.on("-D", "--dso MAG", Float, "Plot deep sky objects") do |v|
    options[:dso] = v
  end
  opts.on("-c", "--const", "Plot constellation lines") do |v|
    options[:const] = v
  end
  opts.on("-b", "--border", "Plot constellation borders") do |v|
    options[:border] = v
  end
  opts.on("-w", "--milkyway", "Plot milky way contours") do |v|
    options[:milkyway] = v
  end
end.parse!

# Fixme: we need a different solution than scale
Scale = options[:scale] || 700

Margin = options[:margin] || 0

# Establish some globals to specify the map to be generated.
if options[:map]
  abort "The Sky Atlas 2000 map number must be between 1 and 26." if options[:map] < 1 or options[:map] > 26
  Phi1 = deg_to_rad(map_specs[options[:map]][0])
  Phi2 = deg_to_rad(map_specs[options[:map]][1])
  Ra0_ha = map_specs[options[:map]][2]
  Ra0 = ha_to_rad(Ra0_ha)
  Dec0 = deg_to_rad(map_specs[options[:map]][3])
  Ra1 = ha_to_rad(map_specs[options[:map]][4])
  Dec1 = deg_to_rad(map_specs[options[:map]][5])
  Ra2 = ha_to_rad(map_specs[options[:map]][6])
  Dec2 = deg_to_rad(map_specs[options[:map]][7])
else
  abort "You must either specify a Sky Atlas 2000 map number or ul and lr coordinates." unless options[:ul] and options[:lr]
  Ra1, Dec1 = parse_coord(options[:ul])
  Ra2, Dec2 = parse_coord(options[:lr])

  # Approximate standard parallels 30% in from the map top and bottom
  Phi1 = Dec2 + 0.7*(Dec1-Dec2)
  Phi2 = Dec2 + 0.3*(Dec1-Dec2)

  # Approximate the map center.
  Ra0 = (Ra1+Ra2)/2
  Ra0_ha = (ra1+ra2)/2
  Dec0 = (Dec1+Dec2)/2
end

# Determine the coordinates of the map boundary.
xmin, ymin = project(Ra1, Dec1, Phi1, Phi2, Ra0, Dec0)
xmax, ymax = project(Ra2, Dec2, Phi1, Phi2, Ra0, Dec0)
bounds = [xmin, xmax, ymin, ymax]

# Print the header material.
puts %Q[<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 #{g(xmax-xmin+2*Margin)} #{g(ymax-ymin+2*Margin)}">]
puts %Q[<g transform="translate(#{g(-xmin+Margin)}, #{g(-ymin+Margin)})">]
puts %Q[<clipPath id="CP">]
puts %Q[<rect x=#{f(xmin)} y=#{f(ymin)} width=#{f(xmax-xmin)} height=#{f(ymax-ymin)} stroke="black" stroke-width="1" fill="white"/>]
puts %Q[</clipPath>]
puts %Q[<g clip-path="url(#CP)">]
puts %Q[<rect x=#{f(xmin)} y=#{f(ymin)} width=#{f(xmax-xmin)} height=#{f(ymax-ymin)} fill="white"/>]

# Print the various map layers.
plot_mw(bounds, Ra0_ha*360/24) if options[:milkyway]
plot_grid(bounds) if options[:grid]
plot_stars(bounds, options[:stars]) if not options[:stars].nil?
plot_const_lines(bounds) if options[:const]
plot_const_borders(bounds) if options[:border]
plot_dsos(bounds, "messier.geojson") if options[:messier]
plot_dsos(bounds, "dsos.14.geojson", options[:dso]) if not options[:dso].nil?
plot_h400(bounds, options[:plus]) if options[:h400]
plot_map_number(bounds, options[:map]) if options[:map]
plot_border(bounds)

# Print the trailer.
puts %Q[</g>]
puts %Q[</g>]
puts %Q[</svg>]
